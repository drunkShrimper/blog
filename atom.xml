<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今天你进步了吗</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lipan.fun/"/>
  <updated>2020-04-05T03:09:54.647Z</updated>
  <id>http://lipan.fun/</id>
  
  <author>
    <name>lipan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TCP三次握手四次挥手</title>
    <link href="http://lipan.fun/2020/04/05/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://lipan.fun/2020/04/05/TCP三次握手四次挥手/</id>
    <published>2020-04-05T02:02:18.000Z</published>
    <updated>2020-04-05T03:09:54.647Z</updated>
    
    <content type="html"><![CDATA[<h3 id="TCP报文格式"><a href="#TCP报文格式" class="headerlink" title="TCP报文格式"></a>TCP报文格式</h3><img src="55dc4e84-573d-4c13-a765-52ed1dd251f9.png" width="50%"><p>*<em>源端口号</em>：表示发送端端口号，字段长16位。</p><p><strong>目的端口</strong>：表示接收端端口号，字段长度16位。</p><p><strong>序号</strong>：字段长32位。序列号是指发送数据的位置。每发送一次数据，就累加一次该数据字节数的大小。序列号不会从0或1开始，而是在建立连接时由计算机生成的随机数作为其初始值通。然后再将每转发过去的字节数累加到初始值上表示数据的位置。例如序号为401，表示第一个字节的编号为 401，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 501。此外，在建立连接和断开连接的时发送的SYN包和FIN包虽然并不携带数据，但是也会作为一个字节增加对应的序列号。</p><p><strong>确认号</strong>：确认应答号字段长度为32位。是指下一次应该收到的数据的序列号。实际上，它是指已收到确认应答号减一为止的数据。发送端接收到这个确认应答号以后可以认为在这个序列号以前的数据都已经被正常接收。</p><p><strong>数据偏移</strong>：该字段表示TCP所传输的数据部分应该从TCP包的哪个位开始，可以把它看做TCP首部的长度。该字段长为4字节。</p><p><strong>保留</strong>：该字段主要是为了以后扩展时使用，其长度为4位，一般设置为0，但即使收到的包在该字段不为0，此包也不会被丢弃。</p><p><strong>控制位</strong>：字段长为8位，每一个从左到至右分别为URG  ACK  PSH  RST  SYN  FIN。这些控制标志也叫作控制位。当它们对应位上的值为1时，具体含义如下：</p><ol><li><p>URG：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p></li><li><p>ACK：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p></li><li><p>PSH：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p></li><li><p>RST：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p></li><li><p>SYN：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p></li><li><p>FIN：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p></li></ol><p><strong>窗口</strong>：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p><p><strong>校验和</strong>：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p><p><strong>紧急指针</strong>：只有当 URG 标志置 <em>1</em> 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p><p><strong>选项和填充</strong>：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p><p><strong>数据部分</strong>： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP*首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。</p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><img src="e92d0ebc-7d46-413b-aec1-34a39602f787.png" width="50%"><p>A 为客户端，B 为服务器端。</p><p><strong>三次握手过程</strong></p><ol><li>B(服务器端) 处于监听状态，等待客户的连接请求。</li><li>A 主动向 B 发送连接请求报文，SYN=1，ACK=0，选择一个随机选择的seq（序号） x。</li><li>B 收到来自A的请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN=1，ACK=1，确认号ack为 x+1，同时也选择一个序号 y。</li><li>A 收到 B 的连接确认报文后，还要向 B 发出确认，ACK=1，确认号为 y+1，序号为 x+1。</li><li>B 收到 A 的确认后，连接建立。</li></ol><p><strong>为什么需要三次握手</strong></p><p><strong>关键点：请求滞留</strong></p><p>正常情况下，A发出连接请求，如果因为连接报文请求丢失而未收到确认，客户端等待一个超时重传时间之后，就会重新请求连接。于是A再重传一次连接请求，B后来收到了请求，并进行确认，建立了连接，数据传输完毕后，就释放链接。这是正常情况下，A共发送了两次连接请求报文段，其中第一个丢失，第二个到达了B。</p><p>考虑这样一种情况，A发送的请求报文连接段并没有丢失，而是在网络中滞留较长时间，以致延误到某个时间到达B，本来是一个早已失效的报文段，但是B收到了此失效连接请求报文段后，就误以为A又重新发送的连接请求报文段，并发送确认报文段给A，同意建立连接，如果没有三次握手，那么B发送确认后，连接就建立了。</p><p>这种情况下，由于A并没有主动建立这个连接，于是不理会B的确认，也不会给B发送数据，而B会一直等待A发送数据，如果没有第三次握手，会导致B的资源浪费。如果有第三次握手，服务器只有收到第三次握手的确认消息才会去建立连接，避免重复打开连接。</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;TCP报文格式&quot;&gt;&lt;a href=&quot;#TCP报文格式&quot; class=&quot;headerlink&quot; title=&quot;TCP报文格式&quot;&gt;&lt;/a&gt;TCP报文格式&lt;/h3&gt;&lt;img src=&quot;55dc4e84-573d-4c13-a765-52ed1dd251f9.png&quot; w
      
    
    </summary>
    
    
      <category term="计算机网络" scheme="http://lipan.fun/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="TCP" scheme="http://lipan.fun/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>基础排序算法</title>
    <link href="http://lipan.fun/2020/04/04/%E5%9F%BA%E7%A1%80%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://lipan.fun/2020/04/04/基础排序算法/</id>
    <published>2020-04-04T15:31:24.000Z</published>
    <updated>2020-04-04T15:31:50.703Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="算法" scheme="http://lipan.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://lipan.fun/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://lipan.fun/2020/04/04/KMP%E7%AE%97%E6%B3%95/"/>
    <id>http://lipan.fun/2020/04/04/KMP算法/</id>
    <published>2020-04-04T12:36:43.000Z</published>
    <updated>2020-04-04T13:16:58.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">oadhifgoarhglkdsa</span><br><span class="line">oar</span><br><span class="line">abcdefg</span><br><span class="line">dec</span><br><span class="line">algeojflas</span><br><span class="line">ojf</span><br><span class="line">jfaweiof</span><br><span class="line">of</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">0</span><br><span class="line">5</span><br><span class="line">7</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#include "stdio.h"</span><br><span class="line">#include "stdlib.h"</span><br><span class="line">#include "iostream.h"</span><br><span class="line">#define TRUE  1</span><br><span class="line">#define FALSE  0</span><br><span class="line">#define OK  1</span><br><span class="line">#define ERROR  0</span><br><span class="line">#define INFEASLBLE  -1</span><br><span class="line">#define OVERFLOW  -2</span><br><span class="line">#define MAXSTRLEN  255  //用户可在255以内定义最大串长</span><br><span class="line">typedef unsigned <span class="keyword">char</span> SString[MAXSTRLEN + <span class="number">1</span>];   <span class="comment">//0号单元存放串的长度</span></span><br><span class="line"><span class="keyword">int</span> next[<span class="number">10000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(SString T, <span class="keyword">int</span> next[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//i&lt;j是恒成立的（在第i个位置匹配失败最好情况是对比第i-1个，j最大值是i-1）</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; T[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || T[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;<span class="comment">//巧妙地得到了下一次要比较的位置 j</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j];<span class="comment">//第j个字母失配，接下来从第next[j]个开始对比</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index_KMP</span><span class="params">(SString S, SString T, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = pos, j = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//j一旦超过模式串长度则匹配成功，i超过主串长度且j没有超出长度则匹配失败</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= S[<span class="number">0</span>] &amp;&amp; j &lt;= T[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//成功匹配（j肯定不为0）则匹配下一个字符 或 第一个就不匹配（j=0,j++就变为1，刚好重新匹配）</span></span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || S[i] == T[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt; T[<span class="number">0</span>])<span class="comment">//j一旦超过模式串长度则匹配成功</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> i - T[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SString T, S;</span><br><span class="line">    <span class="keyword">int</span> i, j, n;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n); <span class="comment">// 指定n对需进行模式匹配的字符串</span></span><br><span class="line">    ch = getchar();</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        ch = getchar();</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= MAXSTRLEN &amp;&amp; (ch != <span class="string">'\n'</span>); i++) <span class="comment">// 录入主串</span></span><br><span class="line">        &#123;</span><br><span class="line">            S[i] = ch;</span><br><span class="line">            ch = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        S[<span class="number">0</span>] = i - <span class="number">1</span>; <span class="comment">// S[0]用于存储主串中字符个数</span></span><br><span class="line">        ch = getchar();</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt;= MAXSTRLEN &amp;&amp; (ch != <span class="string">'\n'</span>); i++) <span class="comment">// 录入模式串</span></span><br><span class="line">        &#123;</span><br><span class="line">            T[i] = ch;</span><br><span class="line">            ch = getchar();</span><br><span class="line">        &#125;</span><br><span class="line">        T[<span class="number">0</span>] = i - <span class="number">1</span>; <span class="comment">// T[0]用于存储模式串中字符个数</span></span><br><span class="line">        pos =Index_KMP(S, T,<span class="number">0</span>); </span><br><span class="line">        printf(<span class="string">"%d\n"</span>, pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;输入样例&quot;&gt;&lt;a href=&quot;#输入样例&quot; class=&quot;headerlink&quot; title=&quot;输入样例&quot;&gt;&lt;/a&gt;输入样例&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
      <category term="算法" scheme="http://lipan.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="KMP" scheme="http://lipan.fun/tags/KMP/"/>
    
      <category term="算法" scheme="http://lipan.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>为什么重写equals方法需同时重写hashCode方法</title>
    <link href="http://lipan.fun/2020/04/04/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E9%9C%80%E5%90%8C%E6%97%B6%E9%87%8D%E5%86%99hashCode%E6%96%B9%E6%B3%95/"/>
    <id>http://lipan.fun/2020/04/04/为什么重写equals方法需同时重写hashCode方法/</id>
    <published>2020-04-04T09:24:41.000Z</published>
    <updated>2020-04-04T09:34:44.569Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Person person = (Person) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.equals(o.name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        HashMap&lt;Person,String&gt; map = <span class="keyword">new</span> HashMap&lt;Person, String&gt;();</span><br><span class="line">        Person person = <span class="keyword">new</span> Person(<span class="string">"张三"</span>);</span><br><span class="line">        map.put(person,<span class="string">"张三"</span>);</span><br><span class="line">        <span class="comment">//从逻辑上讲应该能输出“张三”</span></span><br><span class="line">        System.out.println(<span class="string">"结果:"</span>+map.get(<span class="keyword">new</span> Person(<span class="string">"张三"</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程序的输出结果为<code>null</code></p><p>这是因为在put操作的时候，使用的key从逻辑上讲是等值的（通过equals比较是相等的），但由于没有重写hashCode方法，所以put操作时，变量person最终索引位置是由其hashcode的值来决定的 ，而当我们想通过<code>new Person(&quot;张三&quot;)</code>取出value的时候这个匿名变量的hashcode与变量person的hashcode并不相等，导致计算出的数组下标不同，因此HashMap找不到该key对应的值，返回<code>null</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
      <category term="Java" scheme="http://lipan.fun/categories/Java/"/>
    
    
      <category term="Java" scheme="http://lipan.fun/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>HashMap精解</title>
    <link href="http://lipan.fun/2020/04/03/HashMap%E7%B2%BE%E8%A7%A3/"/>
    <id>http://lipan.fun/2020/04/03/HashMap精解/</id>
    <published>2020-04-03T08:34:01.000Z</published>
    <updated>2020-04-04T09:50:31.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-哈希表"><a href="#1-哈希表" class="headerlink" title="1.哈希表"></a>1.哈希表</h2><p>哈希表的添加，删除，查找等操作，性能十分之高，在没有发生哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)。哈希表的本质是一个数组，数组是采用一段连续的存储单元来存储数据的数据结构。当我们知道下标时，在数组中查找元素的时间复杂度为O(1)。哈希表正是利用了这个特性。</p><p><strong>当我们要新增或查找某个元素，最关键的是找到存放该元素的数组下标。</strong></p><h4 id="如何计算数组下标？"><a href="#如何计算数组下标？" class="headerlink" title="如何计算数组下标？"></a>如何计算数组下标？</h4><p>我们知道每一个对象都有一个哈希值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"aasdfdsf"</span>.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"adfsdf"</span>.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"cdffdf"</span>.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><img src="1585964038(1).png"><p>可以发现这些哈希值会很大，有时还有负数，怎么能作为数组下标呢，有一种简单的办法是：<strong>取余</strong></p><img src="1585987201(1).png"><img src="1585987390(1).png"><p><strong>取余</strong>就是一个简单的<strong>哈希函数</strong></p><h4 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a><strong>哈希冲突</strong></h4><p>可以发现，对于两个元素的哈希值经过哈希函数处理后的结果可能是相同的。<strong>如果两个不同的元素，通过哈希函数得出的实际存储地址相同怎么办</strong>？这种情况就是所谓的<strong>哈希冲突</strong>。</p><p>HashMap采用了<strong>链地址法</strong>解决哈希冲突</p><h2 id="2-HashMap"><a href="#2-HashMap" class="headerlink" title="2.HashMap"></a>2.HashMap</h2><p>HashMap的主干是一个Entry数组。，每一个Entry包含一个key-value键值对，以及指向其下一个节点的指针。所以说Entry其实就是一个节点。下面是部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，HashMap的总体结构可以想象成：</p><img src="1585988362(1).png"><p>通常说<strong>HashMap由数组+链表组成的</strong>，这是指<strong>JDK1.7之前</strong>的HashMap</p><p>当然，在HashMap中的哈希函数肯定不是取余这么简单，在JDK1.7中的哈希函数大体可以理解为将哈希值与HashMap的大小-1进行<strong>二进制与操作</strong></p><p>下面具体看一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hash(<span class="keyword">int</span>)                   <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> <span class="number">1010</span></span><br><span class="line">&amp;</span><br><span class="line">HashMap长度（默认<span class="number">16</span>）- <span class="number">1</span>      <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">结果                         <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span></span><br></pre></td></tr></table></figure><p>可以发现，任何一个数与<code>HashMap长度（默认16）- 1</code>进行&amp;操作后都只会得到一个小于HashMap长度（默认16）的一个数。这样便实现是计算数组下标的功能。这也是为什么HashMap的大小必须是2的幂次方数。（因为2^n-1的前半部分必为0，后半部分必为1。任何一个数与这样的数相与刚好是0-2^n-1的一个数，正好用作数组下标）</p><p>如果你输入一个非2的幂次方数，HashMap会自动计算一个最接近的且&gt;所输入数的2的幂次方数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">roundUpToPowerOf2</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// assert number &gt;= 0 : "number must be non-negative";</span></span><br><span class="line">       <span class="keyword">return</span> number &gt;= MAXIMUM_CAPACITY</span><br><span class="line">               ? MAXIMUM_CAPACITY</span><br><span class="line">               : (number &gt; <span class="number">1</span>) ? Integer.highestOneBit((number - <span class="number">1</span>) &lt;&lt; <span class="number">1</span>) : <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>但是在HashMap中还有更精细的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，在获取hash值时HashMap并不是简单的返回<code>key.hashCode()</code>而是进行了这样的操作：</p><p><code>(h = key.hashCode()) ^ (h &gt;&gt;&gt; 16)</code></p><p>这当于将hashCode的前16位与后16位异或</p><p>这是Java设计者认为在计算数组下标时，hashCode的前半段很少会参与到计算中（由HashMap长度决定），这样会导致哈希冲突经常发生，因此作出这样的处理。</p><h3 id="3-HashMap扩容"><a href="#3-HashMap扩容" class="headerlink" title="3.HashMap扩容"></a>3.HashMap扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**阈值，当table == &#123;&#125;时，该值为初始容量（初始容量默认为16）；当table被填充了，也就是为table分配内存空间后，</span></span><br><span class="line"><span class="comment">threshold一般为 capacity*loadFactory。HashMap在进行扩容时需要参考threshold*/</span></span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"><span class="comment">/**负载因子，代表了table的填充度有多少，默认是0.75</span></span><br><span class="line"><span class="comment">加载因子存在的原因，还是因为减缓哈希冲突，如果初始桶为16，等到满16个元素才扩容，某些桶里可能就有不止一个元素了。</span></span><br><span class="line"><span class="comment">所以加载因子默认为0.75，也就是说大小为16的HashMap，到了第13个元素，就会扩容成32。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当size超过临界阈值threshold，并且即将发生哈希冲突时进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>2 * table.length</code>可以知道，HashMap扩容后的容量是原来的2倍，这个2倍也是有讲究的，参考HashMap计算数组下标的原理（上文已提）就知道了。因为这个特征，扩容后的HashMap上的各个元素的位置要么保持不变，要么为原位置+原HashMap长度。</p><p>原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">情况一（扩容后下标 不变）：</span><br><span class="line">hash(<span class="keyword">int</span>)                 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> <span class="number">1010</span></span><br><span class="line">&amp;</span><br><span class="line">HashMap长度（默认<span class="number">16</span>）- <span class="number">1</span>    <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">                          <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line"></span><br><span class="line">hash(<span class="keyword">int</span>)                 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> <span class="number">1010</span></span><br><span class="line">&amp;</span><br><span class="line">HashMap长度（扩容后）- <span class="number">1</span>    <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1111</span></span><br><span class="line">                          <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line"></span><br><span class="line">情况二（扩容后下标为 原下标+<span class="number">16</span>）：</span><br><span class="line">hash(<span class="keyword">int</span>)                 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1011</span> <span class="number">1010</span></span><br><span class="line">&amp;</span><br><span class="line">HashMap长度（默认<span class="number">16</span>）- <span class="number">1</span>    <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1111</span></span><br><span class="line">                          <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span></span><br><span class="line"></span><br><span class="line">hash(<span class="keyword">int</span>)                 <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1011</span> <span class="number">1010</span></span><br><span class="line">&amp;</span><br><span class="line">HashMap长度（扩容后）- <span class="number">1</span>    <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1111</span></span><br><span class="line">                          <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1010</span></span><br></pre></td></tr></table></figure><h3 id="4-HashMap的get方法"><a href="#4-HashMap的get方法" class="headerlink" title="4.HashMap的get方法"></a>4.HashMap的get方法</h3><p>HashMap的get方法通过key值返回对应value，如果key为null，直接去table[0]处检索。（HashMap的键可以为null）,如果key不为null，则通过哈希函数计算其数组下标，然后遍历链表，找到对应的value。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">             e != <span class="keyword">null</span>;</span><br><span class="line">             e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; </span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5-JDK1-7后的HashMap"><a href="#5-JDK1-7后的HashMap" class="headerlink" title="5.JDK1.7后的HashMap"></a>5.JDK1.7后的HashMap</h3><p>当同一个数组下标对应的链表上数据过多导致性能下降该怎么办（链表的查询速度较慢）？</p><p>JDK1.8对HashMap进行性能优化，当链表长度超过8时，链表会转换为红黑树，当红黑树节点小于6时，红黑树会转换回链表。</p><p>红黑树的插入、查找等操作较快。</p><p>红黑树的讲解见另一篇帖子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-哈希表&quot;&gt;&lt;a href=&quot;#1-哈希表&quot; class=&quot;headerlink&quot; title=&quot;1.哈希表&quot;&gt;&lt;/a&gt;1.哈希表&lt;/h2&gt;&lt;p&gt;哈希表的添加，删除，查找等操作，性能十分之高，在没有发生哈希冲突的情况下，仅需一次定位即可完成，时间复杂度为O(1)
      
    
    </summary>
    
    
      <category term="Java" scheme="http://lipan.fun/categories/Java/"/>
    
    
      <category term="Java" scheme="http://lipan.fun/tags/Java/"/>
    
      <category term="数据结构" scheme="http://lipan.fun/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="HashMap" scheme="http://lipan.fun/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>红黑树精讲</title>
    <link href="http://lipan.fun/2020/04/03/%E7%BA%A2%E9%BB%91%E6%A0%91%E7%B2%BE%E8%AE%B2/"/>
    <id>http://lipan.fun/2020/04/03/红黑树精讲/</id>
    <published>2020-04-03T08:16:42.000Z</published>
    <updated>2020-04-03T08:22:12.722Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="数据结构" scheme="http://lipan.fun/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="java" scheme="http://lipan.fun/tags/java/"/>
    
      <category term="树" scheme="http://lipan.fun/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>百问Java</title>
    <link href="http://lipan.fun/2020/04/02/%E7%99%BE%E9%97%AEJava/"/>
    <id>http://lipan.fun/2020/04/02/百问Java/</id>
    <published>2020-04-02T15:28:42.000Z</published>
    <updated>2020-04-02T16:26:12.822Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Q1：简述JDK8的新特性</strong><br>答：①接口中可以添加<code>default</code>修饰的非抽象方法，可以有方法体和内容。②可以使用lambda表达式，减少代码冗余。③函数式接口，使用<code>@FunctionalInterface</code>注解标明，该接口有且仅有一个抽象方法。④方法引用，可以直接引用已有Java类或对象的方法或构造器，进一步简化lambda表达式。⑤stream流，用于解决已有集合/数组类库的弊端，简化其操作，有<code>foreach</code>遍历、<code>filter</code>过滤、<code>map</code>映射、<code>concat</code>合并等功能。⑥增加日期相关的API。</p><p><strong>Q2：Stream流了解吗？</strong><br>答：①Stream流是JDK1.8的新特性，用于解决已有集合/数组类库的弊端，简化集合/数组的操作。②stream流的获取：集合：直接调用stream()方法获取；数组：使用静态方法<code>Stream.of()</code>/<code>Arrays.stream()</code>获取。③常用方法：<code>forEach()</code> 遍历；<code>count()</code> 统计个数；<code>filter()</code> 按条件过滤；<code>limit()</code> 取前面n个元素；<code>skip()</code> 跳过前面n个元素；<code>map()</code> 映射加工；<code>concat()</code> 合并stream流。④终结方法：foreach/count 调用终结方法后流不能继续使用；非终结方法：每次调用完返回一个新的stream对象，可以继续使用，支持链式编程。⑤收集stream流：把流转为Set集合 <code>collect(Collections.toSet())</code>；把流转为List集合 <code>collect(Collections.toList())</code>；把流转为Collection集合 <code>collect(Collections.toCollection())</code>；把流转为数组 <code>toArray()</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Q1：简述JDK8的新特性&lt;/strong&gt;&lt;br&gt;答：①接口中可以添加&lt;code&gt;default&lt;/code&gt;修饰的非抽象方法，可以有方法体和内容。②可以使用lambda表达式，减少代码冗余。③函数式接口，使用&lt;code&gt;@FunctionalInterf
      
    
    </summary>
    
    
      <category term="Java" scheme="http://lipan.fun/categories/Java/"/>
    
    
      <category term="Java" scheme="http://lipan.fun/tags/Java/"/>
    
      <category term="面试题" scheme="http://lipan.fun/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型基础</title>
    <link href="http://lipan.fun/2020/04/02/Java%E6%B3%9B%E5%9E%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://lipan.fun/2020/04/02/Java泛型基础/</id>
    <published>2020-04-02T15:28:13.000Z</published>
    <updated>2020-04-02T16:25:44.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么要有泛型"><a href="#为什么要有泛型" class="headerlink" title="为什么要有泛型"></a>为什么要有泛型</h2><p>集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只能把元素类型设计为Object，JDK1.5之后使用泛型来解决。因为这个时候除了元素的类型不确定，其他的部分是确的，例如关于这个元素如何保存，如何管理等是确定的，因此此时把元素的类型设计成一个参数，在使用时确定类型，这个类型参数叫做泛型。Collection<e>，List<e>，ArrayList<e> 这个<e>就是类型参数，即泛型。</e></e></e></e></p><p>使用泛型的主要优点是能够在编译时而不是在运行时检测错误。</p><h2 id="泛型的概念"><a href="#泛型的概念" class="headerlink" title="泛型的概念"></a>泛型的概念</h2><p>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个<strong>类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定</strong>（即传入实<br>际的类型参数，也称为类型实参）。</p><h2 id="在集合中使用泛型"><a href="#在集合中使用泛型" class="headerlink" title="在集合中使用泛型"></a>在集合中使用泛型</h2><p>T只能是类，不能用基本数据类型填充。但可以使用包装类填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//类型推断</span></span><br><span class="line">list.add(<span class="number">78</span>);</span><br><span class="line">list.add(<span class="number">88</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(Integer i : list)&#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h2><h3 id="自定义泛型类"><a href="#自定义泛型类" class="headerlink" title="自定义泛型类"></a>自定义泛型类</h3><ol><li><p>泛型声明</p><p><code>interface List&lt;T&gt;</code> 和 <code>class GenTest&lt;K,V&gt;</code><br>其中，T,K,V不代表值，而是表示类型。这里使用任意字母都可以。常用T表示，是Type的缩写。</p></li><li><p>泛型的实例化</p><p>一定要在类名后面指定类型参数的值（类型）。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">Iterator&lt;Customer&gt; iterator = customers.iterator();</span><br></pre></td></tr></table></figure><p>泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价</p><p>jdk1.7，泛型的简化操作：ArrayList<fruit> flist = new ArrayList&lt;&gt;();</fruit></p></li><li><p>泛型的继承/实现</p><p>父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;<span class="comment">// 等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;<span class="comment">//等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><strong>使用示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 使用T类型定义变量</span></span><br><span class="line">    <span class="keyword">private</span> T info;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用T类型定义一般方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(T info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用T类型定义构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(T info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    static的方法中不能声明泛型</span></span><br><span class="line"><span class="comment">//    public static void show(T t) &#123;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    不能在try-catch中使用泛型定义</span></span><br><span class="line"><span class="comment">//    public void test() &#123;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//        &#125; catch (MyException&lt;T&gt; ex) &#123;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fromArrayToCollection</span><span class="params">(T[] a, Collection&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (T o : a) &#123;</span><br><span class="line">            c.add(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object[] ao = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">        Collection&lt;Object&gt; co = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        fromArrayToCollection(ao, co);</span><br><span class="line">        String[] sa = <span class="keyword">new</span> String[<span class="number">20</span>];</span><br><span class="line">        Collection&lt;String&gt; cs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fromArrayToCollection(sa, cs);</span><br><span class="line">        Collection&lt;Double&gt; cd = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 下面代码中T是Double类，但sa是String类型，编译错误。</span></span><br><span class="line">        <span class="comment">// fromArrayToCollection(sa, cd);</span></span><br><span class="line">        <span class="comment">// 下面代码中T是Object类型，sa是String类型，可以赋值成功。</span></span><br><span class="line">        fromArrayToCollection(sa, co);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>List&lt;?&gt;是List<string>、List<object>等各种泛型List的父类。</object></string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    list = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将任意元素加入到其中不是类型安全的 null例外</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    list = <span class="keyword">new</span> ArrayList&lt;Double&gt;();</span><br><span class="line">    <span class="comment">// list.add(3);//编译不通过</span></span><br><span class="line">    list.add(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;?&gt; <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能用在泛型类的声明上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericTypeClass</span>&lt;?&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能用在创建对象上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;?&gt; list2 = <span class="keyword">new</span> ArrayList&lt;?&gt;();</span><br></pre></td></tr></table></figure><p>通配符的上下限</p><ol><li><p>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，或其本身，即&lt;=</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;? extends Number&gt;</span><br><span class="line">只允许泛型为Number及Number子类的引用调用</span><br></pre></td></tr></table></figure></li><li><p>下限super：使用时指定的类型不能小于操作的类，即&gt;=</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;? <span class="keyword">super</span> Number&gt;</span><br><span class="line">只允许泛型为Number及Number父类的引用调用</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么要有泛型&quot;&gt;&lt;a href=&quot;#为什么要有泛型&quot; class=&quot;headerlink&quot; title=&quot;为什么要有泛型&quot;&gt;&lt;/a&gt;为什么要有泛型&lt;/h2&gt;&lt;p&gt;集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以在JDK1.5之前只
      
    
    </summary>
    
    
      <category term="java" scheme="http://lipan.fun/categories/java/"/>
    
    
      <category term="Java" scheme="http://lipan.fun/tags/Java/"/>
    
      <category term="泛型" scheme="http://lipan.fun/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程基础</title>
    <link href="http://lipan.fun/2020/04/02/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>http://lipan.fun/2020/04/02/Java多线程基础/</id>
    <published>2020-04-02T05:25:58.000Z</published>
    <updated>2020-04-02T14:08:37.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念：程序、进程、线程"><a href="#基本概念：程序、进程、线程" class="headerlink" title="基本概念：程序、进程、线程"></a>基本概念：程序、进程、线程</h2><ul><li>程序(program)：可以认为是一组为完成特定任务、用某种语言编写的指令的集合。通常存放在硬盘中，是一种特殊的文件。</li><li>进程(process)：是程序的一次执行过程，或是正在运行的一个程序，可以理解为程序的一个实例。进程有其生命周期：创建、就绪、执行、阻塞和终止状态。通常操作系统为进程分配资源。</li><li>线程(thread)：线程是一个程序内部的一条执行路径。若一个进程同一时间并行执行多个线程，就称这个程序是支持多线程的。线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)，线程向进程请求资而不是操作系统，操作系统并不知道线程的存在。</li></ul><img src="1585824892(1).png" width="50%"><h2 id="JDK1-5之前线程创建的两种方法"><a href="#JDK1-5之前线程创建的两种方法" class="headerlink" title="JDK1.5之前线程创建的两种方法"></a>JDK1.5之前线程创建的两种方法</h2><h3 id="1-继承Thread类的方式"><a href="#1-继承Thread类的方式" class="headerlink" title="1.继承Thread类的方式"></a>1.继承Thread类的方式</h3><ol><li><p>定义子类继承Thread类。</p></li><li><p>子类中重写Thread类中的run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"--启动了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建Thread子类对象，即创建了线程对象。</p></li><li><p>调用线程对象start方法：启动线程，调用run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-实现Runnable接口的方式"><a href="#2-实现Runnable接口的方式" class="headerlink" title="2.实现Runnable接口的方式"></a>2.实现Runnable接口的方式</h3><ol><li><p>定义子类，实现Runnable接口。</p></li><li><p>子类中重写Runnable接口中的run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--启动了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过Thread类含参构造器创建线程对象。</p></li><li><p>将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。</p></li><li><p>调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><ol><li>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</li><li>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源</li><li>运行：当就绪的线程被调度并获得CPU资源时,便进入运行状态， run()方法定义了线程的操作和功能</li><li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</li><li>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</li></ol><img src="1585831007(1).png" width="50%"><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。</p><ul><li><p>典型的由于线程同步造成问题的例子：售票问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+ <span class="string">"售出车票，车票号为："</span> + ticket--);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread());</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        t1.setName(<span class="string">"t1窗口"</span>);</span><br><span class="line">        t2.setName(<span class="string">"t2窗口"</span>);</span><br><span class="line">        t3.setName(<span class="string">"t3窗口"</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当极端请况出现时，ticket的值有可能为0或负数</p></li></ul><p><strong>解决办法：</strong></p><p>Synchronized ：对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。</p><ol><li><p>同步代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (某对象)&#123;</span><br><span class="line"><span class="comment">//  需要被同步的代码;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">func</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>对于并发工作，当两个线程访问相同的资源时， 防止冲突的方法就是当资源被一个线程使用时，在其上加锁。第一个访问某项资源的线程必须锁定这项资源，使其他线程在其在使用该资源期间无法访问该资源，只有在解锁之后，其他线程才可以锁定并使用该资源。</p><h2 id="JDK5-0-新增线程创建方式"><a href="#JDK5-0-新增线程创建方式" class="headerlink" title="JDK5.0 新增线程创建方式"></a>JDK5.0 新增线程创建方式</h2><ol><li>可以有返回值</li><li>可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ol><h3 id="方式1：实现Callable-接口"><a href="#方式1：实现Callable-接口" class="headerlink" title="方式1：实现Callable 接口"></a>方式1：实现Callable 接口</h3><p>Future接口可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。<br>FutrueTask是Futrue接口的唯一的实现类，同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</p><p>Future位于java.util.concurrent包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cancel方法用来取消任务</li><li>isCancelled方法表示任务是否被取消成功，如果在任务正常完成前被取消成功，则返回 true。</li><li>isDone方法表示任务是否已经完成</li><li>get()方法用来获取执行结果，这个方法会产生阻塞，会一直等到任务执行完毕才返回；</li><li>get(long timeout, TimeUnit unit)用来获取执行结果，如果在指定时间内，还没获取到结果，就直接返回null。</li></ul><p><strong>使用示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--启动了"</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        FutureTask&lt;Integer&gt; task = <span class="keyword">new</span> FutureTask&lt;&gt;(myThread);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"task运行结果"</span>+task.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式2：使用线程池"><a href="#方式2：使用线程池" class="headerlink" title="方式2：使用线程池"></a>方式2：使用线程池</h3><ol><li><p>Executor、ExecutorService</p><p>Executor:一个接口，其定义了一个接收Runnable对象的方法executor用来执行一个任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ExecutorService接口对Executor接口进行了扩展，提供了返回Future对象，终止，关闭线程池等方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExecutorService</span> <span class="keyword">extends</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span></span>;</span><br><span class="line">&lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span></span>;</span><br><span class="line">&lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, <span class="keyword">long</span> timeout, TimeUnit unit) <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            Future&lt;Integer&gt; future = executorService.submit(<span class="keyword">new</span> MyThread());</span><br><span class="line">            resultList.add(future);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; future : resultList)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(future.get());</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(ExecutionException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                executorService.shutdown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Executors</p><p>Java提供的工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个可根据需要创建新线程的线程池</span></span><br><span class="line">Executors.newCachedThreadPool()</span><br><span class="line"><span class="comment">//创建一个可重用固定线程数的线程池</span></span><br><span class="line">Executors.newFixedThreadPool(n)</span><br><span class="line"><span class="comment">//创建一个只有一个线程的线程池</span></span><br><span class="line">Executors.newSingleThreadExecutor()</span><br><span class="line"><span class="comment">//创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</span></span><br><span class="line">Executors.newScheduledThreadPool(n)</span><br></pre></td></tr></table></figure><p>使用示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"--启动了"</span>);</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建固定线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建一组异步任务</span></span><br><span class="line">        List&lt;Callable&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> MyThread());</span><br><span class="line">        list.add(<span class="keyword">new</span> MyThread());</span><br><span class="line">        list.add(<span class="keyword">new</span> MyThread());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 提交一组异步任务, 会阻塞主线程</span></span><br><span class="line">        List&lt;Future&lt;Integer&gt;&gt; futures = executorService.invokeAll(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 主线程被阻塞, 不能执行其它任务</span></span><br><span class="line">        System.out.println(<span class="string">"主线程被阻塞---"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 获取返回结果, 此时所有异步任务已执行完毕, 所以不再有阻塞</span></span><br><span class="line">        System.out.println(<span class="string">"主线程继续执行---"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Integer&gt; future : futures) &#123;</span><br><span class="line">            System.out.println(future.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自定义线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"正在执行..."</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        BlockingQueue&lt;Runnable&gt; blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">20</span>);</span><br><span class="line">        ThreadPoolExecutor pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">3</span>,<span class="number">5</span>,<span class="number">50</span>,TimeUnit.MILLISECONDS,blockingQueue);</span><br><span class="line"></span><br><span class="line">        Runnable t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Runnable t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Runnable t3 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Runnable t4 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Runnable t5 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Runnable t6 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        Runnable t7 = <span class="keyword">new</span> MyThread();</span><br><span class="line"></span><br><span class="line">        pool.execute(t1);</span><br><span class="line">        pool.execute(t2);</span><br><span class="line">        pool.execute(t3);</span><br><span class="line">        pool.execute(t4);</span><br><span class="line">        pool.execute(t5);</span><br><span class="line">        pool.execute(t6);</span><br><span class="line">        pool.execute(t7);</span><br><span class="line"></span><br><span class="line">        pool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念：程序、进程、线程&quot;&gt;&lt;a href=&quot;#基本概念：程序、进程、线程&quot; class=&quot;headerlink&quot; title=&quot;基本概念：程序、进程、线程&quot;&gt;&lt;/a&gt;基本概念：程序、进程、线程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序(program)：可以认为是一组为
      
    
    </summary>
    
    
      <category term="Java" scheme="http://lipan.fun/categories/Java/"/>
    
    
      <category term="java" scheme="http://lipan.fun/tags/java/"/>
    
      <category term="多线程" scheme="http://lipan.fun/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多个串的公共子序列</title>
    <link href="http://lipan.fun/2019/11/05/%E5%A4%9A%E4%B8%AA%E4%B8%B2%E7%9A%84%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>http://lipan.fun/2019/11/05/多个串的公共子序列/</id>
    <published>2019-11-05T02:50:09.000Z</published>
    <updated>2020-04-02T14:09:45.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出N个字符串，求出N个公共最长子串的长度。</p><h1 id="详细讲解"><a href="#详细讲解" class="headerlink" title="详细讲解"></a>详细讲解</h1><p>撰写中…</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000000</span>+<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> len[<span class="number">110</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> xlen[<span class="number">110</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> str[<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getXlen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        xlen[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            xlen[i] *= len[j] ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mapping</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> idx = x[<span class="number">1</span>] ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        idx += x[i]*xlen[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deMapping</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) x[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>; i&gt;<span class="number">0</span>&amp;&amp;m!=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        x[i+<span class="number">1</span>] = m/xlen[i];</span><br><span class="line">        m = m%xlen[i] ;</span><br><span class="line">    &#125;</span><br><span class="line">    x[<span class="number">1</span>] = m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getF</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a[mapping(x)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setF</span><span class="params">(<span class="keyword">int</span> x[],<span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    a[mapping(x)] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">hasZero</span><span class="params">(<span class="keyword">int</span> x[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x[i] == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str[i];</span><br><span class="line">        len[i] = str[i].size() +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    getXlen();</span><br><span class="line">    <span class="keyword">int</span> x[n+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) x[i] = <span class="number">0</span>;</span><br><span class="line">    setF(x,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> total_len = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        total_len *= len[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=total_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] =<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=total_len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        deMapping(i,x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hasZero(x))</span><br><span class="line">        &#123;</span><br><span class="line">            setF(x,<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(str[j][x[j]<span class="number">-1</span>] != str[j + <span class="number">1</span>][x[j+<span class="number">1</span>]<span class="number">-1</span>] )</span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp[n+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp[j] = x[j]<span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                setF(x,getF(tmp) + <span class="number">1</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> tmp[n+<span class="number">1</span>],max_sub = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;=n; j++) tmp[j] = x[j];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    tmp[j<span class="number">-1</span>] ++;</span><br><span class="line">                    tmp[j] --;</span><br><span class="line">                    <span class="keyword">if</span>(getF(tmp) &gt; max_sub) max_sub = getF(tmp);</span><br><span class="line">                &#125;</span><br><span class="line">                setF(x,max_sub);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=total_len;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>( a[i] &gt; result) result =a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;result;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给出N个字符串，求出N个公共最长子串的长度。&lt;/p&gt;
&lt;h1 id=&quot;详细讲解&quot;&gt;&lt;a href=&quot;#详细讲解&quot; class
      
    
    </summary>
    
    
      <category term="算法" scheme="http://lipan.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://lipan.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="http://lipan.fun/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>50道sql练习题</title>
    <link href="http://lipan.fun/2019/10/14/50%E9%81%93sql%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>http://lipan.fun/2019/10/14/50道sql练习题/</id>
    <published>2019-10-14T15:51:36.000Z</published>
    <updated>2020-04-02T14:09:16.044Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在网上找的50道SQL练习（使用Oracle）"><a href="#在网上找的50道SQL练习（使用Oracle）" class="headerlink" title="在网上找的50道SQL练习（使用Oracle）"></a>在网上找的50道SQL练习（使用Oracle）</h1><h1 id="数据表创建"><a href="#数据表创建" class="headerlink" title="数据表创建"></a>数据表创建</h1><ol><li>学生表 Student</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Student(<span class="keyword">SId</span> <span class="built_in">varchar</span>(<span class="number">10</span>),Sname <span class="built_in">varchar</span>(<span class="number">10</span>),Sage <span class="built_in">date</span>,Ssex <span class="built_in">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'赵雷'</span> , <span class="keyword">to_date</span>(<span class="string">'1990-01-01'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'钱电'</span> , <span class="keyword">to_date</span>(<span class="string">'1990-12-21'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'孙风'</span> , <span class="keyword">to_date</span>(<span class="string">'1990-12-20'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'李云'</span> , <span class="keyword">to_date</span>(<span class="string">'1990-12-06'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'男'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'周梅'</span> , <span class="keyword">to_date</span>(<span class="string">'1991-12-01'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'吴兰'</span> , <span class="keyword">to_date</span>(<span class="string">'1992-01-01'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'郑竹'</span> , <span class="keyword">to_date</span>(<span class="string">'1989-01-01'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'09'</span> , <span class="string">'张三'</span> , <span class="keyword">to_date</span>(<span class="string">'2017-12-20'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'10'</span> , <span class="string">'李四'</span> , <span class="keyword">to_date</span>(<span class="string">'2017-12-25'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'11'</span> , <span class="string">'李四'</span> , <span class="keyword">to_date</span>(<span class="string">'2012-06-06'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'12'</span> , <span class="string">'赵六'</span> , <span class="keyword">to_date</span>(<span class="string">'2013-06-13'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Student <span class="keyword">values</span>(<span class="string">'13'</span> , <span class="string">'孙七'</span> , <span class="keyword">to_date</span>(<span class="string">'2014-06-01'</span>,<span class="string">'yyyy-MM-dd'</span>) , <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>科目表 Course</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Course(CId <span class="built_in">varchar</span>(<span class="number">10</span>),Cname <span class="built_in">varchar</span>(<span class="number">10</span>),TId <span class="built_in">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'语文'</span> , <span class="string">'02'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'数学'</span> , <span class="string">'01'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Course <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'英语'</span> , <span class="string">'03'</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>教师表 Teacher</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Teacher(TId <span class="built_in">varchar</span>(<span class="number">10</span>),Tname <span class="built_in">varchar</span>(<span class="number">10</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'张三'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'李四'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Teacher <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'王五'</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>成绩表 SC</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> SC(<span class="keyword">SId</span> <span class="built_in">varchar</span>(<span class="number">10</span>),CId <span class="built_in">varchar</span>(<span class="number">10</span>),score <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'02'</span> , <span class="number">90</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'01'</span> , <span class="string">'03'</span> , <span class="number">99</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'01'</span> , <span class="number">70</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'02'</span> , <span class="number">60</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'02'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'01'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'02'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'03'</span> , <span class="string">'03'</span> , <span class="number">80</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'01'</span> , <span class="number">50</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'02'</span> , <span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'04'</span> , <span class="string">'03'</span> , <span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'01'</span> , <span class="number">76</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'05'</span> , <span class="string">'02'</span> , <span class="number">87</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'01'</span> , <span class="number">31</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'06'</span> , <span class="string">'03'</span> , <span class="number">34</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'02'</span> , <span class="number">89</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> SC <span class="keyword">values</span>(<span class="string">'07'</span> , <span class="string">'03'</span> , <span class="number">98</span>);</span><br></pre></td></tr></table></figure><h1 id="练习题目"><a href="#练习题目" class="headerlink" title="练习题目"></a>练习题目</h1><h2 id="题组1"><a href="#题组1" class="headerlink" title="题组1"></a>题组1</h2><h3 id="题型1"><a href="#题型1" class="headerlink" title="题型1"></a>题型1</h3><ol><li>查询” 01 “课程比” 02 “课程成绩高的学生的信息及课程分数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.*,t2.score 课程<span class="number">02</span>分数 <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> sc.cid = <span class="string">'01'</span>) t1, </span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> sc.cid = <span class="string">'02'</span>) t2</span><br><span class="line"><span class="keyword">where</span> t1.score &gt; t2.score <span class="keyword">and</span> t1.sid = t2.sid;</span><br></pre></td></tr></table></figure><ol start="2"><li>查询同时存在” 01 “课程和” 02 “课程的情况</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.*,t2.score 课程<span class="number">02</span>分数 <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> sc.cid = <span class="string">'01'</span>) t1, </span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> sc.cid = <span class="string">'02'</span>) t2</span><br><span class="line"><span class="keyword">where</span> t1.sid = t2.sid;</span><br></pre></td></tr></table></figure><ol start="3"><li>查询存在” 01 “课程但可能不存在” 02 “课程的情况(不存在时显示为 null )</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.*,t2.score 课程<span class="number">02</span>分数 <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> sc.cid = <span class="string">'01'</span>) t1 <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> sc.cid = <span class="string">'02'</span>) t2</span><br><span class="line"><span class="keyword">on</span> t1.sid = t2.sid;</span><br></pre></td></tr></table></figure><ol start="4"><li>查询不存在” 01 “课程但存在” 02 “课程的情况</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> SC <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> sc.cid = <span class="string">'02'</span>)  <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> SC <span class="keyword">where</span> cid = <span class="string">'01'</span>) ;</span><br></pre></td></tr></table></figure><h3 id="题型2"><a href="#题型2" class="headerlink" title="题型2"></a>题型2</h3><ol><li>查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sid,s.sname,t.avg_score <span class="keyword">from</span> </span><br><span class="line">  student s,</span><br><span class="line">  (<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">avg</span>(score) avg_score <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>) t </span><br><span class="line"><span class="keyword">where</span> s.sid = t.sid <span class="keyword">and</span> t.avg_score&gt;<span class="number">60</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sid,s.sname,t.avg_score <span class="keyword">from</span> </span><br><span class="line">  student s,</span><br><span class="line">  (<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">avg</span>(score) avg_score <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">avg</span>(score)&gt;<span class="number">60</span>) t</span><br><span class="line"><span class="keyword">where</span> s.sid = t.sid;</span><br></pre></td></tr></table></figure><h3 id="题型3"><a href="#题型3" class="headerlink" title="题型3"></a>题型3</h3><ol><li>查询在 SC 表存在成绩的学生信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">sid</span> <span class="keyword">from</span> SC);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> student.* <span class="keyword">from</span> student,sc <span class="keyword">where</span> student.SId=sc.SId;</span><br></pre></td></tr></table></figure><h3 id="题型4"><a href="#题型4" class="headerlink" title="题型4"></a>题型4</h3><ol><li>查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩(没成绩的显示为 null )</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sid,s.sname,t.count_course,t.sum_score <span class="keyword">from</span> </span><br><span class="line">student s, </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">count</span>(cid) count_course,<span class="keyword">sum</span>(score) sum_score <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>) t </span><br><span class="line"><span class="keyword">where</span> s.sid = t.sid;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sid,s.sname,t.count_course,t.sum_score <span class="keyword">from</span> </span><br><span class="line">student s </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">count</span>(cid) count_course,<span class="keyword">sum</span>(score) sum_score <span class="keyword">from</span> SC <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>) t </span><br><span class="line"><span class="keyword">on</span> s.sid = t.sid;</span><br></pre></td></tr></table></figure><ol start="2"><li>查有成绩的学生信息</li></ol><p><strong>这里涉及到一个知识点：当表2的记录数量非常大的时候，选用exists比in要高效很多</strong></p><blockquote><p>EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False.<br>结论：IN()适合B表比A表数据小的情况<br>结论：EXISTS()适合B表比A表数据大的情况</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">sid</span> <span class="keyword">from</span> SC);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc <span class="keyword">where</span> student.sid = sc.sid);</span><br></pre></td></tr></table></figure><h3 id="题型5"><a href="#题型5" class="headerlink" title="题型5"></a>题型5</h3><ol><li>查询「李」姓老师的数量</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> teacher <span class="keyword">where</span> tname <span class="keyword">like</span> <span class="string">'李_%'</span>;</span><br></pre></td></tr></table></figure><h3 id="题型6"><a href="#题型6" class="headerlink" title="题型6"></a>题型6</h3><ol><li>查询学过「张三」老师授课的同学的信息</li></ol><p>先上一种笨方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> sc <span class="keyword">where</span> cid =  </span><br><span class="line">     ( <span class="keyword">select</span> cid <span class="keyword">from</span> course <span class="keyword">where</span> tid = </span><br><span class="line">      (<span class="keyword">select</span> tid <span class="keyword">from</span> teacher <span class="keyword">where</span> tname = <span class="string">'张三'</span>)));</span><br></pre></td></tr></table></figure><p>下面的方法一开始理解起来有些困难，但这是很普通的<strong>多表联查</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.* <span class="keyword">from</span> student,teacher,course,sc</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    student.sid = sc.sid </span><br><span class="line">    <span class="keyword">and</span> course.cid=sc.cid </span><br><span class="line">    <span class="keyword">and</span> course.tid = teacher.tid </span><br><span class="line">    <span class="keyword">and</span> tname = <span class="string">'张三'</span>;</span><br></pre></td></tr></table></figure><h3 id="题型7"><a href="#题型7" class="headerlink" title="题型7"></a>题型7</h3><ol><li>查询没有学全所有课程的同学的信息</li></ol><p>第一种做法<strong>忽略了有的学生一门课都没学</strong>的情况（所以其sid不会出现在SC表）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">sid</span>  <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">count</span>(cid) &lt;(<span class="keyword">select</span> <span class="keyword">count</span>(cid) <span class="keyword">from</span> course));</span><br></pre></td></tr></table></figure><p>正确的做法应该是先查出修了所有课程的学生，再求其相对于所有学生集的补集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.sid <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">  <span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc</span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line">  <span class="keyword">having</span> <span class="keyword">count</span>(sc.cid)= (<span class="keyword">select</span> <span class="keyword">count</span>(cid) <span class="keyword">from</span> course)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="题型8"><a href="#题型8" class="headerlink" title="题型8"></a>题型8</h3><ol><li>查询至少有一门课与学号为” 01 “的同学所学相同的同学的信息</li></ol><p>思路：student表要和SC表作联合查询这是毫无疑问的，在查询时要多加一个限制条件“课程id要属于学号为” 01 “的同学所学的课程id集合”</p><p><strong>同理可以使用natural join，实质上natural join跟表联查是等价的。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> student.* </span><br><span class="line"><span class="keyword">from</span> student,SC </span><br><span class="line"><span class="keyword">where</span> SC.cid <span class="keyword">in</span> (<span class="keyword">select</span> cid <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">sid</span> = <span class="string">'01'</span>) <span class="keyword">and</span> student.sid=SC.sid;</span><br></pre></td></tr></table></figure><h3 id="题型9"><a href="#题型9" class="headerlink" title="题型9"></a>题型9</h3><ol><li>查询和” 01 “号的同学学习的课程完全相同的其他同学的信息</li></ol><p>这题本来不用写这么长但是由于这个操作：<strong>”取一个中间表的某字段最大的记录（即：top N问题）“</strong>使得这个查询变得很长，实际上没有这么长</p><p>分析：</p><p>首先取出sid为“01”的学生学习的所有课程的cid，这个应该不难</p><p>然后根据SC表中每个学生的每门成绩有且仅有一条记录这个原则：</p><ul><li>查询出SC中所有学生中有学习“01”学生学习的课程的记录</li><li>对上一条操作得到的中间表进行分组（根据sid），并计算count(cid)</li><li>如果某学生的count(cid)和”01“学生的count(cid)相同，则说明他们所学习的课程完全一样。同样的，如果某学生的count(cid)小于”01“学生的count(cid)，说明他学的课有和”01“学生相同的，但没有学完”01“学生学的所有课。如果某学生并不在这个查询结果内，说明他学的课没有一门是”01“学生学的课。</li><li>最后根据题目要求还要排除“01”学生这条记录</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.* <span class="keyword">from</span> </span><br><span class="line">student s,</span><br><span class="line">(<span class="keyword">select</span> * <span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">count</span>(cid) same_num <span class="keyword">from</span> SC </span><br><span class="line">        <span class="keyword">where</span> cid <span class="keyword">in</span> (<span class="keyword">select</span> cid <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">sid</span> = <span class="string">'01'</span>) <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>)</span><br><span class="line"><span class="keyword">where</span> same_num = (<span class="keyword">select</span> <span class="keyword">count</span>(cid) <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">sid</span> =<span class="string">'01'</span>)) t</span><br><span class="line"><span class="keyword">where</span> s.sid =t.sid <span class="keyword">and</span> s.sid &lt;&gt; <span class="string">'01'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.* <span class="keyword">from</span> </span><br><span class="line">student s,</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> SC </span><br><span class="line">        <span class="keyword">where</span> cid <span class="keyword">in</span> (<span class="keyword">select</span> cid <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">sid</span> = <span class="string">'01'</span>) <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span></span><br><span class="line"><span class="keyword">count</span>(cid) = (<span class="keyword">select</span> <span class="keyword">count</span>(cid) <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">sid</span> =<span class="string">'01'</span>)) t</span><br><span class="line"><span class="keyword">where</span> s.sid =t.sid <span class="keyword">and</span> s.sid &lt;&gt; <span class="string">'01'</span>;</span><br></pre></td></tr></table></figure><h3 id="题型10"><a href="#题型10" class="headerlink" title="题型10"></a>题型10</h3><ol><li>查询没学过”张三”老师讲授的任一门课程的学生姓名</li></ol><p>这题思路跟<strong>题型7</strong>一样，要查没学过“张三”老师的课的学生，应该先查学过的，在求补集。如果直接求的话，会出现有人一门课都没学过的情况。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span>  <span class="keyword">sid</span> <span class="keyword">from</span> sc <span class="keyword">where</span> cid  <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> cid <span class="keyword">from</span> course <span class="keyword">where</span> tid = (<span class="keyword">select</span> tid <span class="keyword">from</span> teacher <span class="keyword">where</span> tname = <span class="string">'张三'</span>) ));</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> student.sid <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> sc.sid <span class="keyword">from</span> sc,course,teacher </span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        sc.cid = course.cid</span><br><span class="line">        <span class="keyword">and</span> course.tid = teacher.tid</span><br><span class="line">        <span class="keyword">and</span> teacher.tname= <span class="string">"张三"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="题组2"><a href="#题组2" class="headerlink" title="题组2"></a>题组2</h2><h3 id="题型1-1"><a href="#题型1-1" class="headerlink" title="题型1"></a>题型1</h3><ol><li>查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sid 学号,s.sname 姓名,t2.avg_score 平均成绩 </span><br><span class="line"><span class="keyword">from</span> student s,</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> sc <span class="keyword">where</span> score&lt;<span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">count</span>(cid)&gt;<span class="number">1</span>) t1,</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">avg</span>(score) avg_score <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>) t2</span><br><span class="line"><span class="keyword">where</span> t1.sid = t2.sid <span class="keyword">and</span> s.sid = t1.sid;</span><br></pre></td></tr></table></figure><h3 id="题型2-1"><a href="#题型2-1" class="headerlink" title="题型2"></a>题型2</h3><ol><li>检索” 01 “课程分数小于 60，按分数降序排列的学生信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">natural</span> <span class="keyword">join</span> sc </span><br><span class="line"><span class="keyword">where</span> score &lt;<span class="number">60</span> <span class="keyword">and</span> cid = <span class="string">'01'</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span> ;</span><br></pre></td></tr></table></figure><h3 id="题型3-1"><a href="#题型3-1" class="headerlink" title="题型3"></a>题型3</h3><ol><li>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩</li></ol><p>此题本身难倒是不难，反而是如何显示要下一番功夫</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> sc </span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>,<span class="string">'avg'</span> cid,<span class="keyword">avg</span>(score) score <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sid</span>,<span class="keyword">case</span> <span class="keyword">when</span> cid = <span class="string">'avg'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> <span class="keyword">asc</span>,score <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="题型4-1"><a href="#题型4-1" class="headerlink" title="题型4"></a>题型4</h3><ol><li>查询各科成绩最高分、最低分和平均分：</li></ol><p>以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</p><p>及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90</p><p>要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</p><p><strong>这里没有查出课程名，如果要查的话natural join一下course表即可</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">cid 课程<span class="keyword">ID</span>,</span><br><span class="line"><span class="keyword">count</span>(*) 选修人数,</span><br><span class="line"><span class="keyword">max</span>(sc.score) 最高分,</span><br><span class="line"><span class="keyword">min</span>(sc.score) 最低分,</span><br><span class="line"><span class="keyword">AVG</span>(sc.score) 平均分,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*) 及格率,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">70</span> <span class="keyword">and</span> sc.score&lt;<span class="number">80</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*) 中等率,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">80</span> <span class="keyword">and</span> sc.score&lt;<span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*) 优良率,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sc.score&gt;=<span class="number">90</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> )/<span class="keyword">count</span>(*) 优秀率 </span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> cid</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">count</span>(*) <span class="keyword">DESC</span>, cid <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><h3 id="题型5-1"><a href="#题型5-1" class="headerlink" title="题型5"></a>题型5</h3><ol><li>按各科成绩进行排序，并显示排名， Score 重复时保留名次空缺</li></ol><p>思路:</p><ul><li>首先查出比自己高分的记录有多少条，注意利用左连接的特点使得第一名（因为没有人比他高分，不使用左连接的话会没有第一名的记录比较麻烦）能被记录。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> sc  a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sc  b </span><br><span class="line"><span class="keyword">on</span> a.score&lt;b.score <span class="keyword">and</span> a.cid = b.cid <span class="keyword">order</span> <span class="keyword">by</span> a.sid;</span><br></pre></td></tr></table></figure><ul><li>在得到的上表中，对于sid来说有多少条记录就说明排名是多少,但是因为需求是 <strong>Score 重复时保留名次空缺</strong>，因此不用<code>count(a.sid)</code>(或<code>count(a.cid)</code>,<code>count(a.score)</code>)而是使用<code>count(b.score)+1</code>,这样在计数比自己高的人数时就不会把自己算进去（因为使用的是<code>left join</code>,自己那一条记录的<code>b.score</code>是为<code>null</code> 的）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.cid, a.sid, a.score, <span class="keyword">count</span>(b.score)+<span class="number">1</span>  <span class="keyword">rank</span></span><br><span class="line"><span class="keyword">from</span> sc  a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> sc  b </span><br><span class="line"><span class="keyword">on</span> a.score&lt;b.score <span class="keyword">and</span> a.cid = b.cid</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.cid, a.sid,a.score</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.cid, <span class="keyword">rank</span> <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>按各科成绩进行排序，并显示排名， Score 重复时不保留名次空缺</li></ol><p>此题与题型6的第2题情况一样</p><h3 id="题型6-1"><a href="#题型6-1" class="headerlink" title="题型6"></a>题型6</h3><ol><li>查询学生的总成绩，并进行排名，总分重复时保留名次空缺</li></ol><p>与题型5第1题解法类似</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.sid,t.score,<span class="keyword">count</span>(t2.score)+<span class="number">1</span> <span class="keyword">rank</span> </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">sum</span>(score) score <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>) t </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">sid</span>,<span class="keyword">sum</span>(score) score <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>) t2 </span><br><span class="line"><span class="keyword">on</span> t.score&lt;t2.score  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t.sid,t.score <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(*);</span><br></pre></td></tr></table></figure><ol start="2"><li>查询学生的总成绩，并进行排名，总分重复时不保留名次空缺</li></ol><p>这题没什么好思路，直接抄的别人的答案。在SQL里面变量用@来标识。但是在Oracle中的语法好像不是这样定义变量的，还是说应该使用plsql来解决？（下面是mysql的解法）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> @crank=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> q.sid, total, @crank := @crank +<span class="number">1</span> <span class="keyword">as</span> <span class="keyword">rank</span> <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> sc.sid, <span class="keyword">sum</span>(sc.score) <span class="keyword">as</span> total <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sc.sid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> total <span class="keyword">desc</span>)q;</span><br></pre></td></tr></table></figure><h3 id="题型7-1"><a href="#题型7-1" class="headerlink" title="题型7"></a>题型7</h3><ol><li>统计各科成绩各分数段人数：课程编号，课程名称，[100-85]，[85-70]，[70-60]，[60-0] 及所占百分比</li></ol><p>这里要注意<code>case when 条件 then 1 else 0 end</code>的原理，它是返回数值1或0，如果使用<code>count</code>来接收的话，不论是1还是0都会计数。效果跟<code>count(*)</code>一样，所以此处应该使用<code>sum</code>来计数，如果还不明白，将<code>sum(case when 条件 then 2 else 0 end)</code>和<code>count(case when 条件 then 2 else 0 end)</code>查询一下就明白了。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cid,cname,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">85</span> <span class="keyword">and</span> score &lt;=<span class="number">100</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">"[100-85]人数"</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">70</span> <span class="keyword">and</span> score &lt;<span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">"[85-70]人数"</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">60</span> <span class="keyword">and</span> score &lt;<span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">"[70-60]人数"</span>,</span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">0</span> <span class="keyword">and</span> score &lt;<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="string">"[60-0]人数"</span>,</span><br><span class="line"><span class="keyword">round</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">85</span> <span class="keyword">and</span> score &lt;=<span class="number">100</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*),<span class="number">2</span>) </span><br><span class="line"><span class="string">"[100-85]比例"</span>,</span><br><span class="line"><span class="keyword">round</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">70</span> <span class="keyword">and</span> score &lt;<span class="number">85</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*),<span class="number">2</span>) </span><br><span class="line"><span class="string">"[85-70]比例"</span>,</span><br><span class="line"><span class="keyword">round</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">60</span> <span class="keyword">and</span> score &lt;<span class="number">70</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*),<span class="number">2</span>) </span><br><span class="line"><span class="string">"[70-60]比例"</span>,</span><br><span class="line"><span class="keyword">round</span>(<span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> score&gt;=<span class="number">0</span> <span class="keyword">and</span> score &lt;<span class="number">60</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>)/<span class="keyword">count</span>(*),<span class="number">2</span>) </span><br><span class="line"><span class="string">"[60-0]比例"</span></span><br><span class="line"><span class="keyword">from</span> sc <span class="keyword">natural</span> <span class="keyword">join</span> course <span class="keyword">group</span> <span class="keyword">by</span> cid,cname;</span><br></pre></td></tr></table></figure><h3 id="题型8-1"><a href="#题型8-1" class="headerlink" title="题型8"></a>题型8</h3><ol><li>查询各科成绩前三名的记录</li></ol><p>这个题目还是有点麻烦，因为Oracle不支持像mysql里面的<code>limit</code>语法。这里查询了一下资料，可以使用<code>OVER(PARTITION BY)</code>函数。附上一篇<a href="https://www.jianshu.com/p/e756a7d322f3" target="_blank" rel="noopener">讲解博客</a>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> sc.*,row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> cid <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>  ) <span class="keyword">rank</span> <span class="keyword">from</span> sc) </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">rank</span> &lt; <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>但是上面的解法有个问题，如果有相同分数的就有点难办了。所以还是得用“找出比自己高分的人数”的思路来确定自己的排名。解法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> sc  a <span class="keyword">where</span> sc.cid = a.cid <span class="keyword">and</span> sc.score&lt;a.score )&lt; <span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> cid <span class="keyword">asc</span>, sc.score <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2 id="题组3"><a href="#题组3" class="headerlink" title="题组3"></a>题组3</h2><h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><ol><li>查询每门课程被选修的学生数</li></ol><p>查成绩单上每门课对应的记录条数即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cid,<span class="keyword">count</span>(*) <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> cid;</span><br></pre></td></tr></table></figure><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><ol><li>查询出只选修两门课程的学生学号和姓名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>,sname <span class="keyword">from</span> sc <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span>,sname <span class="keyword">having</span> <span class="keyword">count</span>(*) =<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><ol><li>查询男生、女生人数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ssex 性别,<span class="keyword">count</span>(*) 人数  <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> ssex;</span><br></pre></td></tr></table></figure><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><ol><li>查询名字中含有「风」字的学生信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *<span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'%风%'</span>;</span><br></pre></td></tr></table></figure><h3 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h3><ol><li>查询同名同性学生名单，并统计同名人数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  s1.sname 姓名,<span class="keyword">count</span>(*) 人数 <span class="keyword">from</span> </span><br><span class="line">student s1,student s2 </span><br><span class="line"><span class="keyword">where</span> s1.sid &lt;&gt; s2.sid <span class="keyword">and</span> s1.sname = s2.sname <span class="keyword">group</span> <span class="keyword">by</span> s1.sname;</span><br></pre></td></tr></table></figure><h3 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h3><ol><li>查询 1990 年出生的学生名单</li></ol><p>注：在Oracle里面没有<code>year()</code>函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> to_char(sage,<span class="string">'YYYY'</span>) = <span class="string">'1990'</span> ;</span><br></pre></td></tr></table></figure><h3 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h3><ol><li>查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cname,cid,<span class="keyword">round</span>(<span class="keyword">avg</span>(score),<span class="number">2</span>) <span class="keyword">from</span> </span><br><span class="line">sc <span class="keyword">natural</span> <span class="keyword">join</span> course </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> cid,cname <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">avg</span>(score) <span class="keyword">desc</span>,cid <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><h3 id="题目8"><a href="#题目8" class="headerlink" title="题目8"></a>题目8</h3><ol><li>查询平均成绩大于等于 85 的所有学生的学号、姓名和平均成绩</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>,sname,<span class="keyword">round</span>(<span class="keyword">avg</span>(score),<span class="number">2</span>) <span class="keyword">from</span> student <span class="keyword">natural</span> <span class="keyword">join</span> sc <span class="keyword">group</span> <span class="keyword">by</span> sname,<span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">avg</span>(score) &gt;=<span class="number">85</span>;</span><br></pre></td></tr></table></figure><h3 id="题目9"><a href="#题目9" class="headerlink" title="题目9"></a>题目9</h3><ol><li>查询课程名称为「数学」，且分数低于 60 的学生姓名和分数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,score <span class="keyword">from</span> </span><br><span class="line">sc,course,student </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">sc.cid = course.cid <span class="keyword">and</span> course.cname = <span class="string">'数学'</span> <span class="keyword">and</span> sc.sid = student.sid <span class="keyword">and</span> sc.score&lt;<span class="number">60</span>;</span><br></pre></td></tr></table></figure><h3 id="题目10"><a href="#题目10" class="headerlink" title="题目10"></a>题目10</h3><ol><li>查询所有学生的课程及分数情况（存在学生没成绩，没选课的情况）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sid,sname,cname,score <span class="keyword">from</span> </span><br><span class="line">student <span class="keyword">left</span> <span class="keyword">join</span> (<span class="keyword">select</span> * <span class="keyword">from</span> sc <span class="keyword">natural</span> <span class="keyword">join</span> course) t </span><br><span class="line"><span class="keyword">on</span> student.sid = t.sid;</span><br></pre></td></tr></table></figure><h2 id="题组4"><a href="#题组4" class="headerlink" title="题组4"></a>题组4</h2><h3 id="题目1-1"><a href="#题目1-1" class="headerlink" title="题目1"></a>题目1</h3><ol><li>查询任何一门课程成绩在 70 分以上的姓名、课程名称和分数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,cname,score <span class="keyword">from</span> </span><br><span class="line">student <span class="keyword">natural</span> <span class="keyword">join</span>  sc <span class="keyword">natural</span> <span class="keyword">join</span> course</span><br><span class="line"><span class="keyword">where</span> score&gt;<span class="number">70</span>;</span><br></pre></td></tr></table></figure><p>解法2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.sname, course.cname,sc.score <span class="keyword">from</span> student,course,sc</span><br><span class="line"><span class="keyword">where</span> sc.score&gt;<span class="number">70</span></span><br><span class="line"><span class="keyword">and</span> student.sid = sc.sid</span><br><span class="line"><span class="keyword">and</span> sc.cid = course.cid;</span><br></pre></td></tr></table></figure><h3 id="题目2-1"><a href="#题目2-1" class="headerlink" title="题目2"></a>题目2</h3><ol><li>查询存在有人不及格的课程</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> cname <span class="keyword">from</span> sc <span class="keyword">natural</span> <span class="keyword">join</span> course <span class="keyword">where</span> score &lt; <span class="number">60</span>;</span><br></pre></td></tr></table></figure><h3 id="题目3-1"><a href="#题目3-1" class="headerlink" title="题目3"></a>题目3</h3><ol><li>查询课程编号为 01 且课程成绩在 80 分以上的学生的学号和姓名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>,sname <span class="keyword">from</span> sc <span class="keyword">natural</span> <span class="keyword">join</span> student <span class="keyword">where</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> cid = <span class="string">'01'</span>;</span><br></pre></td></tr></table></figure><h3 id="题目4-1"><a href="#题目4-1" class="headerlink" title="题目4"></a>题目4</h3><ol><li>求每门课程的学生人数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cname,<span class="keyword">count</span>(<span class="keyword">sid</span>) <span class="keyword">from</span> sc <span class="keyword">natural</span> <span class="keyword">join</span> course <span class="keyword">group</span> <span class="keyword">by</span> cname;</span><br></pre></td></tr></table></figure><h3 id="题目5-1"><a href="#题目5-1" class="headerlink" title="题目5"></a>题目5</h3><ol><li>成绩不重复，查询选修「张三」老师所授课程的学生中，成绩最高的学生信息及其成绩</li></ol><p>要注意一个老师是可以有多门课的，这里的数据恰好是只有一门课。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student.*,t.* <span class="keyword">from</span> </span><br><span class="line">sc ,</span><br><span class="line">student,</span><br><span class="line">(<span class="keyword">select</span> cid,<span class="keyword">max</span>(score) score  <span class="keyword">from</span> sc </span><br><span class="line"> <span class="keyword">where</span> cid </span><br><span class="line"> <span class="keyword">in</span>(<span class="keyword">select</span> cid <span class="keyword">from</span> course <span class="keyword">natural</span> <span class="keyword">join</span> teacher <span class="keyword">where</span> tname =<span class="string">'张三'</span>) <span class="keyword">group</span> <span class="keyword">by</span> cid) t</span><br><span class="line"><span class="keyword">where</span> sc.sid = student.sid <span class="keyword">and</span> sc.cid = t.cid <span class="keyword">and</span> sc.score = t.score;</span><br></pre></td></tr></table></figure><h3 id="题目6-1"><a href="#题目6-1" class="headerlink" title="题目6"></a>题目6</h3><ol start="2"><li>查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.* <span class="keyword">from</span> sc t1 <span class="keyword">inner</span> <span class="keyword">join</span> sc t2 </span><br><span class="line"><span class="keyword">on</span> t1.cid = t2.cid <span class="keyword">and</span> t1.score = t2.score <span class="keyword">and</span> t1.sid &lt;&gt; t2.sid <span class="keyword">order</span> <span class="keyword">by</span> t1.cid;</span><br></pre></td></tr></table></figure><h3 id="题目7-1"><a href="#题目7-1" class="headerlink" title="题目7"></a>题目7</h3><ol><li>查询每门课成绩排名前2的学生</li></ol><p>这题在Oracle里面还是比较麻烦，解题思路跟<strong>题组2 题型5</strong>差不多</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t1.cid,t1.sid,<span class="keyword">count</span>(*) <span class="keyword">from</span> </span><br><span class="line">sc t1 <span class="keyword">left</span> <span class="keyword">join</span> sc t2 <span class="keyword">on</span> </span><br><span class="line">t2.score&gt;t1.score <span class="keyword">and</span> t1.sid &lt;&gt; t2.sid <span class="keyword">and</span> t1.cid = t2.cid  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t1.cid,t1.sid <span class="keyword">having</span> <span class="keyword">count</span>(*)&lt;=<span class="number">2</span> <span class="keyword">order</span> <span class="keyword">by</span> cid;</span><br></pre></td></tr></table></figure><h3 id="题目8-1"><a href="#题目8-1" class="headerlink" title="题目8"></a>题目8</h3><ol><li>统计每门课程的学生选修人数（超过 5 人的课程才统计）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cid,<span class="keyword">count</span>(*) <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> cid <span class="keyword">having</span> <span class="keyword">count</span>(*) &gt;<span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="题目9-1"><a href="#题目9-1" class="headerlink" title="题目9"></a>题目9</h3><ol><li>检索至少选修两门课程的学生学号</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>  <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">count</span>(cid) &gt;=<span class="number">2</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">sid</span>;</span><br></pre></td></tr></table></figure><h3 id="题目10-1"><a href="#题目10-1" class="headerlink" title="题目10"></a>题目10</h3><ol><li>查询选修了全部课程的学生信息</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">sid</span> <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">sid</span> <span class="keyword">from</span> sc <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">sid</span> <span class="keyword">having</span> <span class="keyword">count</span>(cid) =(<span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> course));</span><br></pre></td></tr></table></figure><h2 id="题组5"><a href="#题组5" class="headerlink" title="题组5"></a>题组5</h2><h3 id="题目1-2"><a href="#题目1-2" class="headerlink" title="题目1"></a>题目1</h3><ol><li>查询各学生的年龄，只按年份来算</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,<span class="keyword">round</span>(months_between(<span class="keyword">sysdate</span>,sage)/<span class="number">12</span>,<span class="number">0</span>) 年龄 <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h3 id="题目2-2"><a href="#题目2-2" class="headerlink" title="题目2"></a>题目2</h3><ol><li>查询本周过生日的学生</li></ol><p>在oracle里面貌似比较难实现…</p><p>思路：首先将出生日期的年份替换为当前年份，然后看这个日期是今年的第几周，是否与当前时间是当前第几周相同。（感觉解法是错的…有待研究）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sid</span>  <span class="keyword">from</span> student <span class="keyword">where</span> </span><br><span class="line">to_char(add_months(sage,(to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy'</span>) - to_char(sage,<span class="string">'yyyy'</span>))*<span class="number">12</span>),<span class="string">'ww'</span>) = </span><br><span class="line">to_char(<span class="keyword">sysdate</span>,<span class="string">'ww'</span>);</span><br></pre></td></tr></table></figure><h3 id="题目3-2"><a href="#题目3-2" class="headerlink" title="题目3"></a>题目3</h3><ol><li>查询下周过生日的学生</li></ol><p>这题要考虑边界情况，如果下周是下一年了就比较难搞了…（有待研究）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="题目4-2"><a href="#题目4-2" class="headerlink" title="题目4"></a>题目4</h3><ol><li>查询本月过生日的学生</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'MM'</span>) = to_char(sage,<span class="string">'MM'</span>);</span><br></pre></td></tr></table></figure><h3 id="题目5-2"><a href="#题目5-2" class="headerlink" title="题目5"></a>题目5</h3><ol><li>查询下月过生日的学生</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">MOD</span>(to_char(<span class="keyword">sysdate</span>,<span class="string">'MM'</span>)+<span class="number">1</span>,<span class="number">13</span>)= to_char(sage,<span class="string">'MM'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在网上找的50道SQL练习（使用Oracle）&quot;&gt;&lt;a href=&quot;#在网上找的50道SQL练习（使用Oracle）&quot; class=&quot;headerlink&quot; title=&quot;在网上找的50道SQL练习（使用Oracle）&quot;&gt;&lt;/a&gt;在网上找的50道SQL练习（使用O
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://lipan.fun/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="SQL" scheme="http://lipan.fun/tags/SQL/"/>
    
      <category term="Oracle" scheme="http://lipan.fun/tags/Oracle/"/>
    
      <category term="数据库" scheme="http://lipan.fun/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>算法理论之NP问题</title>
    <link href="http://lipan.fun/2019/09/17/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E4%B9%8BNP%E9%97%AE%E9%A2%98/"/>
    <id>http://lipan.fun/2019/09/17/算法理论之NP问题/</id>
    <published>2019-09-17T12:20:44.000Z</published>
    <updated>2020-04-02T14:10:11.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识回顾"><a href="#基础知识回顾" class="headerlink" title="基础知识回顾"></a>基础知识回顾</h1><p>要了解上面的算法概念，首先要回顾一下这两个基本的数学概念</p><ol><li><p>多项式函数</p><p>形如：形如 Pn(x)=a(n)x^n+a(n-1)x^(n-1)+…+a(1)x+a(0)的函数，叫做多项式函数</p><p>例如：y=kx+b 就是一个次数是1的多项式函数，y=ax^2+bx+c就是一个次数为2的多项式函数</p></li><li><p>时间复杂度</p><p>这个东西用大白话来讲就是衡量一个算法优劣的最重要指标，例如冒泡算法的时间复杂度是o(<em>n^2</em>)，其中n是指数据的规模。这里面的<em>n^2</em>就是一个多项式。  </p></li></ol><h1 id="那么什么是p类问题"><a href="#那么什么是p类问题" class="headerlink" title="那么什么是p类问题"></a>那么什么是p类问题</h1><p>例如冒泡算法的时间复杂度是o(<em>n^2</em>)，它是一个多项式时间的算法问题，所以我们将之称为P类问题(P：polynominal，多项式)。</p><h1 id="NP问题的定义"><a href="#NP问题的定义" class="headerlink" title="NP问题的定义"></a>NP问题的定义</h1><p>NP类问题：能在多项式时间内验证得出一个正确解的问题。(NP:Nondeterministic polynominal，非确定性多项式)</p><p><strong>P类问题是NP问题的子集，因为存在多项式时间解法的问题，总能在多项式时间内验证他。</strong></p><p>如何理解NP问题呢？</p><p>我们可以这样想：有一个问题，你不知道是否存在一个多项式算法来解决它，但是你可以通过一次次的猜测（或者说尝试）从而有机会在一个多项式的时间呢找出他的解。这种不确定性就可以称之为N。这样的问题就是NP问题啦。</p><h1 id="NPC问题"><a href="#NPC问题" class="headerlink" title="NPC问题"></a>NPC问题</h1><p>NPC问题:如果所有np问题都能在多项式时间内转化为他，则称该np问题为npc问题(NPC:NP complete又叫NP完全问题)</p><p>那么啥叫问题的转化呢？我们用最直白的想法来理解就是：要解决一个问题的前提是要解决另一个（或多个）问题，这样我们就可以将原来的问题转化为其他的问题了。就好比解方程组一样，求解出了其中一个未知数，就能够求解下一条方程。</p><p><strong>NPC问题是NP问题的子集。</strong></p><p>很多时候NPC问题是找不到一个多项式时间算法的，更多时候他是一个指数级的算法。</p><h1 id="最后转载一个大佬的讲解"><a href="#最后转载一个大佬的讲解" class="headerlink" title="最后转载一个大佬的讲解"></a>最后转载一个<a href="https://blog.csdn.net/qq_29176963/article/details/82776543" target="_blank" rel="noopener">大佬的讲解</a></h1><blockquote><ol><li>P类问题：能在多项式时间内可解的问题。</li><li>NP类问题：在多项式时间内“可验证”的问题。也就是说，不能判定这个问题到底有没有解，而是猜出一个解来在多项式时间内证明这个解是否正确。即该问题的猜测过程是不确定的，而对其某一个解的验证则能够在多项式时间内完成。P类问题属于NP问题，但NP类问题不一定属于P类问题。</li><li>NPC问题：存在这样一个NP问题，所有的NP问题都可以约化成它。换句话说，只要解决了这个问题，那么所有的NP问题都解决了。其定义要满足2个条件：</li></ol><ul><li>它是一个NP问题；</li><li>所有NP问题都能规约到它。</li></ul><ol start="4"><li><p>NP难问题：NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条（就是说，NP-Hard问题要比 NPC问题的范围广，NP-Hard问题没有限定属于NP），即所有的NP问题都能约化到它，但是他不一定是一个NP问题。NP-Hard问题同样难以找到多项式的算法，但它不列入我们的研究范围，因为它不一定是NP问题。即使NPC问题发现了多项式级的算法，NP-Hard问题有可能仍然无法得到多项式级的算法。事实上，由于NP-Hard放宽了限定条件，它将有可能比所有的NPC问题的时间复杂度更高从而更难以解决。</p><p>以上四个问题之间的关系如下图所示：<br><img src="https://raw.githubusercontent.com/KunBB/MarkdownPhotos/master/PNPNPCNPhard/1.jpg" alt="Loading..."></p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础知识回顾&quot;&gt;&lt;a href=&quot;#基础知识回顾&quot; class=&quot;headerlink&quot; title=&quot;基础知识回顾&quot;&gt;&lt;/a&gt;基础知识回顾&lt;/h1&gt;&lt;p&gt;要了解上面的算法概念，首先要回顾一下这两个基本的数学概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;多项式函数&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="算法" scheme="http://lipan.fun/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://lipan.fun/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="算法理论" scheme="http://lipan.fun/tags/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="http://lipan.fun/2019/09/11/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://lipan.fun/2019/09/11/Markdown基本语法/</id>
    <published>2019-09-11T14:36:36.000Z</published>
    <updated>2020-04-02T05:28:08.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>段落的换行是使用两个以上空格加上回车。<br>新的段落</p><p>或者使用空出一行的方式（推荐）。</p><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p><em>斜体1</em><br><em>斜体2</em><br><strong>粗体1</strong><br><strong>粗体2</strong><br><strong><em>斜粗体1</em></strong><br><strong><em>斜粗体2</em></strong><br><del>删除线</del><br><u>下划线</u></p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线有多种写法</p><hr><hr><hr><hr><hr><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>hexo需要<a href="https://github.com/LouisBarranqueiro/hexo-footnotes" target="_blank" rel="noopener">安装插件</a>才能使用脚注</p><p>因为页面布局问题，脚注的效果并不是很好</p><p>这是一个脚注1<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>  </p><p>生成一个脚注2<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>  </p><p>生成一个脚注3<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表有三种写法  </p><ul><li>第一项</li><li>第二项</li><li>第三项 </li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>表项1</li><li>表项2</li><li>表项3</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>表项1</li><li>表项2</li><li>表项3</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套只需在子列表中的选项添加四个空格即可：  </p><ol><li>表项1<ul><li>子表项</li><li>子表项</li></ul></li><li>表项2<ol><li>子表项</li><li>子表项</li></ol></li></ol><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><blockquote><p>区块效果</p><blockquote><p>区块效果</p><blockquote><p>区块效果</p></blockquote></blockquote></blockquote><h2 id="在列表中使用区块-amp-在区块中使用列表"><a href="#在列表中使用区块-amp-在区块中使用列表" class="headerlink" title="在列表中使用区块&amp;在区块中使用列表"></a>在列表中使用区块&amp;在区块中使用列表</h2><ul><li>表项<blockquote><p>区块</p><pre><code>1. 表项2. 表项</code></pre><p>区块</p><pre><code>* 表项* 表项</code></pre><blockquote><p>区块</p></blockquote></blockquote></li><li>表项</li><li>表项</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="段落代码"><a href="#段落代码" class="headerlink" title="段落代码"></a>段落代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`）</p><p><code>print()</code> 函数的使用</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。  </p><pre><code>public void setEmpname(String empname){    this.empname=empname;}public void setBonus(Double bonus){    this.bonus=bonus;}</code></pre><p>可以用 ``` 包裹一段代码，并指定一种语言（这样可以语法高亮，也可以不指定）：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpname</span><span class="params">(String empname)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empname=empname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(Double bonus)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bonus=bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'RUNOOB'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>注意放在脚注下的内容是无效的，所以变量要写在脚注之前<br><a href="https://www.runoob.com" target="_blank" rel="noopener">Runoob</a><br><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a><br><a href="https://www.runoob.com" target="_blank" rel="noopener">https://www.runoob.com</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>hexo不建议使用Markdown的<code>![]()</code>方式引用图片，而是使用了<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">新的方法</a>管理图片</p><img src="/2019/09/11/Markdown基本语法/1.jpg" title="slug">  <p>如果要指定图片的高度与宽度，可以使用普通的 <code>&lt;img&gt;</code> 标签。<br><img src="1.jpg" width="50%"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th align="left">表头</th><th align="right">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">这里是 <strong>脚注</strong> 的 <em>内容</em>.</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">这里是<strong>脚注2</strong>的<em>内容</em>.</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">这里填写需要的脚注，一般放在页面最下面</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h
      
    
    </summary>
    
    
      <category term="其他" scheme="http://lipan.fun/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="Markdown" scheme="http://lipan.fun/tags/Markdown/"/>
    
  </entry>
  
</feed>
