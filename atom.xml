<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>今天你吃早餐了吗?</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://drunkShrimper.github.io/blog/"/>
  <updated>2019-09-24T10:09:00.047Z</updated>
  <id>http://drunkShrimper.github.io/blog/</id>
  
  <author>
    <name>lipan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法:数的统计问题</title>
    <link href="http://drunkShrimper.github.io/blog/2019/09/24/%E7%AE%97%E6%B3%95-%E6%95%B0%E7%9A%84%E7%BB%9F%E8%AE%A1%E9%97%AE%E9%A2%98/"/>
    <id>http://drunkShrimper.github.io/blog/2019/09/24/算法-数的统计问题/</id>
    <published>2019-09-24T10:03:52.000Z</published>
    <updated>2019-09-24T10:09:00.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><blockquote><p><strong>一本书的页码从自然数1开始顺序编码直到自然数n。书的页码按照通常的习惯编排 <a id="more"></a>，每个页码都不含多余的前导数字0。例如第6页用6表示而不是06或006。数字统计问题要求对给定书的总页码，计算出书的全部页码中分别用到多少次数字0,1,2,3,…..9。</strong></p></blockquote><h1 id="解法1：暴力求解"><a href="#解法1：暴力求解" class="headerlink" title="解法1：暴力求解"></a>解法1：暴力求解</h1><p>这个没什么好说的，有编程基础的都会</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> totalNum[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        tmp = i;</span><br><span class="line">        <span class="keyword">while</span>(tmp)&#123;</span><br><span class="line">            totalNum[tmp%<span class="number">10</span>]+=<span class="number">1</span>;</span><br><span class="line">            tmp/=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%ld"</span>,totalNum[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解法2：递归求解"><a href="#解法2：递归求解" class="headerlink" title="解法2：递归求解"></a>解法2：递归求解</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一本书的页码从自然数1开始顺序编码直到自然数n。书的页码按照通常的习惯编排
    
    </summary>
    
    
      <category term="算法" scheme="http://drunkShrimper.github.io/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="递归" scheme="http://drunkShrimper.github.io/blog/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>算法理论之p问题、NP问题、NP完全问题与NP难问题</title>
    <link href="http://drunkShrimper.github.io/blog/2019/09/17/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA%E4%B9%8Bp%E9%97%AE%E9%A2%98%E3%80%81NP%E9%97%AE%E9%A2%98%E3%80%81NP%E5%AE%8C%E5%85%A8%E9%97%AE%E9%A2%98%E4%B8%8ENP%E9%9A%BE%E9%97%AE%E9%A2%98/"/>
    <id>http://drunkShrimper.github.io/blog/2019/09/17/算法理论之p问题、NP问题、NP完全问题与NP难问题/</id>
    <published>2019-09-17T12:20:44.000Z</published>
    <updated>2019-09-21T00:42:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础知识回顾"><a href="#基础知识回顾" class="headerlink" title="基础知识回顾"></a>基础知识回顾</h1><p>要了解上面的算法概念，首先要回顾一下<a id="more"></a>这两个基本的数学概念</p><ol><li><p>多项式函数</p><p>形如：形如 Pn(x)=a(n)x^n+a(n-1)x^(n-1)+…+a(1)x+a(0)的函数，叫做多项式函数</p><p>例如：y=kx+b 就是一个次数是1的多项式函数，y=ax^2+bx+c就是一个次数为2的多项式函数</p></li><li><p>时间复杂度</p><p>这个东西用大白话来讲就是衡量一个算法优劣的最重要指标，例如冒泡算法的时间复杂度是o(<em>n^2</em>)，其中n是指数据的规模。这里面的<em>n^2</em>就是一个多项式。  </p></li></ol><h1 id="那么什么是p类问题"><a href="#那么什么是p类问题" class="headerlink" title="那么什么是p类问题"></a>那么什么是p类问题</h1><p>例如冒泡算法的时间复杂度是o(<em>n^2</em>)，它是一个多项式时间的算法问题，所以我们将之称为P类问题(P：polynominal，多项式)。</p><h1 id="NP问题的定义"><a href="#NP问题的定义" class="headerlink" title="NP问题的定义"></a>NP问题的定义</h1><p>NP类问题：能在多项式时间内验证得出一个正确解的问题。(NP:Nondeterministic polynominal，非确定性多项式)</p><p><strong>P类问题是NP问题的子集，因为存在多项式时间解法的问题，总能在多项式时间内验证他。</strong></p><p>如何理解NP问题呢？</p><p>我们可以这样想：有一个问题，你不知道是否存在一个多项式算法来解决它，但是你可以通过一次次的猜测（或者说尝试）从而有机会在一个多项式的时间呢找出他的解。这种不确定性就可以称之为N。这样的问题就是NP问题啦。</p><h1 id="NPC问题"><a href="#NPC问题" class="headerlink" title="NPC问题"></a>NPC问题</h1><p>NPC问题:如果所有np问题都能在多项式时间内转化为他，则称该np问题为npc问题(NPC:NP complete又叫NP完全问题)</p><p>那么啥叫问题的转化呢？我们用最直白的想法来理解就是：要解决一个问题的前提是要解决另一个（或多个）问题，这样我们就可以将原来的问题转化为其他的问题了。就好比解方程组一样，求解出了其中一个未知数，就能够求解下一条方程。</p><p><strong>NPC问题是NP问题的子集。</strong></p><p>很多时候NPC问题是找不到一个多项式时间算法的，更多时候他是一个指数级的算法。</p><h1 id="感觉写的有点烂，最后转载一个大佬的讲解"><a href="#感觉写的有点烂，最后转载一个大佬的讲解" class="headerlink" title="感觉写的有点烂，最后转载一个大佬的讲解"></a>感觉写的有点烂，最后转载一个<a href="https://blog.csdn.net/qq_29176963/article/details/82776543" target="_blank" rel="noopener">大佬的讲解</a></h1><blockquote><ol><li>P类问题：能在多项式时间内可解的问题。</li><li>NP类问题：在多项式时间内“可验证”的问题。也就是说，不能判定这个问题到底有没有解，而是猜出一个解来在多项式时间内证明这个解是否正确。即该问题的猜测过程是不确定的，而对其某一个解的验证则能够在多项式时间内完成。P类问题属于NP问题，但NP类问题不一定属于P类问题。</li><li>NPC问题：存在这样一个NP问题，所有的NP问题都可以约化成它。换句话说，只要解决了这个问题，那么所有的NP问题都解决了。其定义要满足2个条件：</li></ol><ul><li>它是一个NP问题；</li><li>所有NP问题都能规约到它。</li></ul><ol start="4"><li><p>NP难问题：NP-Hard问题是这样一种问题，它满足NPC问题定义的第二条但不一定要满足第一条（就是说，NP-Hard问题要比 NPC问题的范围广，NP-Hard问题没有限定属于NP），即所有的NP问题都能约化到它，但是他不一定是一个NP问题。NP-Hard问题同样难以找到多项式的算法，但它不列入我们的研究范围，因为它不一定是NP问题。即使NPC问题发现了多项式级的算法，NP-Hard问题有可能仍然无法得到多项式级的算法。事实上，由于NP-Hard放宽了限定条件，它将有可能比所有的NPC问题的时间复杂度更高从而更难以解决。</p><p>以上四个问题之间的关系如下图所示：<br><img src="https://raw.githubusercontent.com/KunBB/MarkdownPhotos/master/PNPNPCNPhard/1.jpg" alt="Loading..."></p></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基础知识回顾&quot;&gt;&lt;a href=&quot;#基础知识回顾&quot; class=&quot;headerlink&quot; title=&quot;基础知识回顾&quot;&gt;&lt;/a&gt;基础知识回顾&lt;/h1&gt;&lt;p&gt;要了解上面的算法概念，首先要回顾一下
    
    </summary>
    
    
      <category term="算法" scheme="http://drunkShrimper.github.io/blog/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法理论" scheme="http://drunkShrimper.github.io/blog/tags/%E7%AE%97%E6%B3%95%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://drunkShrimper.github.io/blog/2019/09/12/%E4%B8%AA%E4%BA%BA%E7%AE%80%E5%8E%86/"/>
    <id>http://drunkShrimper.github.io/blog/2019/09/12/个人简历/</id>
    <published>2019-09-12T08:02:39.000Z</published>
    <updated>2019-09-12T08:03:39.996Z</updated>
    
    <content type="html"><![CDATA[<p>正在撰写中…….</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;正在撰写中…….&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="http://drunkShrimper.github.io/blog/2019/09/11/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://drunkShrimper.github.io/blog/2019/09/11/Markdown基本语法/</id>
    <published>2019-09-11T14:36:36.000Z</published>
    <updated>2019-09-12T08:09:15.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题  "></a>二级标题  <a id="more"></a></h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><hr><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>段落的换行是使用两个以上空格加上回车。<br>新的段落</p><p>或者使用空出一行的方式（推荐）。</p><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><p><em>斜体1</em><br><em>斜体2</em><br><strong>粗体1</strong><br><strong>粗体2</strong><br><strong><em>斜粗体1</em></strong><br><strong><em>斜粗体2</em></strong><br><del>删除线</del><br><u>下划线</u></p><h1 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h1><p>分割线有多种写法</p><hr><hr><hr><hr><hr><h1 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h1><p>hexo需要<a href="https://github.com/LouisBarranqueiro/hexo-footnotes" target="_blank" rel="noopener">安装插件</a>才能使用脚注</p><p>因为页面布局问题，脚注的效果并不是很好</p><p>这是一个脚注1<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>  </p><p>生成一个脚注2<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>  </p><p>生成一个脚注3<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>无序列表有三种写法  </p><ul><li>第一项</li><li>第二项</li><li>第三项 </li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>表项1</li><li>表项2</li><li>表项3</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>表项1</li><li>表项2</li><li>表项3</li></ol><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表嵌套只需在子列表中的选项添加四个空格即可：  </p><ol><li>表项1<ul><li>子表项</li><li>子表项</li></ul></li><li>表项2<ol><li>子表项</li><li>子表项</li></ol></li></ol><h1 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h1><blockquote><p>区块效果</p><blockquote><p>区块效果</p><blockquote><p>区块效果</p></blockquote></blockquote></blockquote><h2 id="在列表中使用区块-amp-在区块中使用列表"><a href="#在列表中使用区块-amp-在区块中使用列表" class="headerlink" title="在列表中使用区块&amp;在区块中使用列表"></a>在列表中使用区块&amp;在区块中使用列表</h2><ul><li>表项<blockquote><p>区块</p><pre><code>1. 表项2. 表项</code></pre><p>区块</p><pre><code>* 表项* 表项</code></pre><blockquote><p>区块</p></blockquote></blockquote></li><li>表项</li><li>表项</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="段落代码"><a href="#段落代码" class="headerlink" title="段落代码"></a>段落代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（`）</p><p><code>print()</code> 函数的使用</p><h2 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h2><p>代码区块使用 4 个空格或者一个制表符（Tab 键）。  </p><pre><code>public void setEmpname(String empname){    this.empname=empname;}public void setBonus(Double bonus){    this.bonus=bonus;}</code></pre><p>可以用 ``` 包裹一段代码，并指定一种语言（这样可以语法高亮，也可以不指定）：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmpname</span><span class="params">(String empname)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.empname=empname;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBonus</span><span class="params">(Double bonus)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.bonus=bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'RUNOOB'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>注意放在脚注下的内容是无效的，所以变量要写在脚注之前<br><a href="https://www.runoob.com" target="_blank" rel="noopener">Runoob</a><br><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a><br><a href="https://www.runoob.com" target="_blank" rel="noopener">https://www.runoob.com</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>hexo不建议使用Markdown的<code>![]()</code>方式引用图片，而是使用了<a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">新的方法</a>管理图片</p><img src="/blog/2019/09/11/Markdown基本语法/1.jpg" title="slug">  <p>如果要指定图片的高度与宽度，可以使用普通的 <code>&lt;img&gt;</code> 标签。<br><img src="1.jpg" width="50%"></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><table><thead><tr><th align="left">表头</th><th align="right">表头</th><th align="center">表头</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">这里是 <strong>脚注</strong> 的 <em>内容</em>.</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">这里是<strong>脚注2</strong>的<em>内容</em>.</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">这里填写需要的脚注，一般放在页面最下面</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题  &quot;&gt;&lt;/a&gt;二级标题
    
    </summary>
    
    
      <category term="其它技术" scheme="http://drunkShrimper.github.io/blog/categories/%E5%85%B6%E5%AE%83%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Markdown" scheme="http://drunkShrimper.github.io/blog/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>总结过去与展望未来</title>
    <link href="http://drunkShrimper.github.io/blog/2019/09/11/%E6%80%BB%E7%BB%93%E8%BF%87%E5%8E%BB%E4%B8%8E%E5%B1%95%E6%9C%9B%E6%9C%AA%E6%9D%A5/"/>
    <id>http://drunkShrimper.github.io/blog/2019/09/11/总结过去与展望未来/</id>
    <published>2019-09-11T14:03:36.000Z</published>
    <updated>2019-09-12T08:07:49.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向过去说再见"><a href="#向过去说再见" class="headerlink" title="向过去说再见"></a>向过去说再见</h1><p>大学生活注定是有苦有乐的。从大一的一腔热血、懵懵懂懂，到大二的<a id="more"></a>得过且过与迷茫。再到大三重新设立目标，再次上路。过去的你是怎样的已经不重要了，重要的是你现在要做什么，你以后要做什么。大一时天真无邪，以为高三奋斗了好久啊，现在终于上到了大学，可以有一份还算是不错的工作。能够让家人不用日晒雨淋的日子了。</p><p>然而现实总是很残酷，以为上到大学，大家都是积极向上努力奋斗的。可是总会有些得过且过的人在影响这你。大学的课程，上课水一水，作业上网cv一下。期末考前背一背，还能考到个不错的成绩。甚至还沾沾自喜，以为自己找到了大学生活的诀窍。</p><p>然而，不管过去的你是如何的，只要能够设立目标，重新上路，努力提升自己，那就是最好的。</p><h1 id="拥抱新生活"><a href="#拥抱新生活" class="headerlink" title="拥抱新生活"></a>拥抱新生活</h1><p>在写这个博客时，我也是下了不少的决心的，因为自己的技术水平还远远不过关。还要花时间精力在写博客上，是不是太浪费时间了。然而，尽管自己还有很多需要努力的地方，还有继续奋斗。我还是想通过博客的方式记录一下自己的生活，不仅是技术上的，也是生活上的。</p><p>希望自己能过在接下来的日子里努力奋斗，一点一点的提升自己。因为大三还是有一些课程需要上（尽管我觉得听那些老师讲课并没有什么用，还不如自己跟着mooc学习），不能专心于自己的学习计划。所以我决定先给自己定几个短期的小目标，循序渐进。</p><p>同时也希望那些还在迷茫中的朋友能够尽快找到奋斗的目标，不断前进！</p><h1 id="短期计划"><a href="#短期计划" class="headerlink" title="短期计划"></a>短期计划</h1><ol><li>花大概一小时的时间学习Markdown语法，并使用博客记录学习笔记</li><li>将一些比较重要的有道云笔记的学习记录搬运过来</li><li>学习常用的办公软件 word Excel PPT</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;向过去说再见&quot;&gt;&lt;a href=&quot;#向过去说再见&quot; class=&quot;headerlink&quot; title=&quot;向过去说再见&quot;&gt;&lt;/a&gt;向过去说再见&lt;/h1&gt;&lt;p&gt;大学生活注定是有苦有乐的。从大一的一腔热血、懵懵懂懂，到大二的
    
    </summary>
    
    
      <category term="生活" scheme="http://drunkShrimper.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="情感" scheme="http://drunkShrimper.github.io/blog/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
</feed>
